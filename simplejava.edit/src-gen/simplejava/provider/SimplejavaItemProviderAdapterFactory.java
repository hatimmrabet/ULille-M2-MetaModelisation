/**
 */
package simplejava.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import simplejava.util.SimplejavaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimplejavaItemProviderAdapterFactory extends SimplejavaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimplejavaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JPackageItemProvider jPackageItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJPackageAdapter() {
		if (jPackageItemProvider == null) {
			jPackageItemProvider = new JPackageItemProvider(this);
		}

		return jPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JClassItemProvider jClassItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJClassAdapter() {
		if (jClassItemProvider == null) {
			jClassItemProvider = new JClassItemProvider(this);
		}

		return jClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JInterfaceItemProvider jInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJInterfaceAdapter() {
		if (jInterfaceItemProvider == null) {
			jInterfaceItemProvider = new JInterfaceItemProvider(this);
		}

		return jInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JTypeItemProvider jTypeItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJTypeAdapter() {
		if (jTypeItemProvider == null) {
			jTypeItemProvider = new JTypeItemProvider(this);
		}

		return jTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JAttribut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JAttributItemProvider jAttributItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JAttribut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJAttributAdapter() {
		if (jAttributItemProvider == null) {
			jAttributItemProvider = new JAttributItemProvider(this);
		}

		return jAttributItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JParametre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JParametreItemProvider jParametreItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JParametre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJParametreAdapter() {
		if (jParametreItemProvider == null) {
			jParametreItemProvider = new JParametreItemProvider(this);
		}

		return jParametreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JVariableItemProvider jVariableItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJVariableAdapter() {
		if (jVariableItemProvider == null) {
			jVariableItemProvider = new JVariableItemProvider(this);
		}

		return jVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JNamedElementItemProvider jNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJNamedElementAdapter() {
		if (jNamedElementItemProvider == null) {
			jNamedElementItemProvider = new JNamedElementItemProvider(this);
		}

		return jNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simplejava.JMethode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JMethodeItemProvider jMethodeItemProvider;

	/**
	 * This creates an adapter for a {@link simplejava.JMethode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJMethodeAdapter() {
		if (jMethodeItemProvider == null) {
			jMethodeItemProvider = new JMethodeItemProvider(this);
		}

		return jMethodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (jPackageItemProvider != null)
			jPackageItemProvider.dispose();
		if (jClassItemProvider != null)
			jClassItemProvider.dispose();
		if (jInterfaceItemProvider != null)
			jInterfaceItemProvider.dispose();
		if (jTypeItemProvider != null)
			jTypeItemProvider.dispose();
		if (jAttributItemProvider != null)
			jAttributItemProvider.dispose();
		if (jParametreItemProvider != null)
			jParametreItemProvider.dispose();
		if (jVariableItemProvider != null)
			jVariableItemProvider.dispose();
		if (jNamedElementItemProvider != null)
			jNamedElementItemProvider.dispose();
		if (jMethodeItemProvider != null)
			jMethodeItemProvider.dispose();
	}

}
